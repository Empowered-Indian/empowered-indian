import React from "react";
import { Document, Page, Text, View, StyleSheet, PDFDownloadLink, Image } from "@react-pdf/renderer";
import { FiDownload } from "react-icons/fi";
import { formatINRCompact } from "./formatters";

const styles = StyleSheet.create({
  page: {
    padding: 24,
    fontSize: 10,
    fontFamily: "Helvetica",
    color: "#0f172a",
    backgroundColor: "#ffffff",
  },
  headerRow: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 12,
  },
  logo: { width: 48, height: 48, borderRadius: 8, marginRight: 12 },
  titleBlock: { flex: 1 },
  title: { fontSize: 16, fontWeight: "bold", color: "#0f172a" },
  subtitle: { fontSize: 10, color: "#475569", marginTop: 2 },
  timestamp: { fontSize: 9, color: "#6b7280", textAlign: "right" },

  // Card list container
  cardsContainer: {
    marginTop: 6,
    display: "flex",
    flexDirection: "column",
    gap: 8,
  },
  card: {
    borderRadius: 8,
    padding: 10,
    backgroundColor: "#fff",
    borderWidth: 1,
    borderColor: "#e6eef4",
    flexDirection: "row",
    alignItems: "center",
  },
  stateLeft: { width: "36%", paddingRight: 8 },
  stateName: { fontSize: 12, fontWeight: "700", color: "#0f172a" },
  mpBadge: {
    marginTop: 6,
    display: "inline-flex",
    backgroundColor: "#eef2ff",
    color: "#3730a3",
    padding: "2 6",
    borderRadius: 999,
    fontSize: 9,
    fontWeight: "700",
    alignSelf: "flex-start",
  },
  metricsRight: {
    flex: 1,
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
  },
  metricBlock: { width: "16%", alignItems: "flex-end" },
  metricLabel: { fontSize: 8, color: "#64748b" },
  metricValue: { fontSize: 11, fontWeight: "700", color: "#0f172a", marginTop: 4 },

  // Utilization bar
  utilBlock: { width: "22%", alignItems: "flex-end" },
  utilLabel: { fontSize: 11, fontWeight: "700", marginBottom: 4 },
  utilBarOuter: {
    width: "100%",
    height: 8,
    backgroundColor: "#f1f5f9",
    borderRadius: 999,
    overflow: "hidden",
  },
  utilFillGreen: { height: "100%", backgroundColor: "#10b981" },
  utilFillOrange: { height: "100%", backgroundColor: "#f59e0b" },
  utilFillRed: { height: "100%", backgroundColor: "#ef4444" },

  // Summary and performers
  summary: { marginTop: 12, paddingTop: 8, borderTopWidth: 1, borderTopColor: "#eef2f6" },
  summaryRow: { flexDirection: "row", justifyContent: "space-between", marginBottom: 6 },
  summaryTitle: { fontSize: 12, fontWeight: "700", color: "#0f172a" },
  smallText: { fontSize: 10, color: "#475569" },

  performers: { marginTop: 8, flexDirection: "row", gap: 8 },
  performerCol: { width: "48%" },
  performerItem: { fontSize: 10, marginBottom: 4, color: "#0f172a" },

  footer: { marginTop: 12, fontSize: 9, color: "#6b7280", textAlign: "center" },
});

/* Helper to choose bar style */
const utilBarStyleFor = (p) => {
  if (p >= 75) return styles.utilFillGreen;
  if (p >= 40) return styles.utilFillOrange;
  return styles.utilFillRed;
};

const MyDocument = ({ data = [] }) => {
  const timestamp = new Date().toLocaleString();

  const totalAllocated = data.reduce((sum, s) => sum + (s.totalAllocated || 0), 0);
  const totalExpenditure = data.reduce((sum, s) => sum + (s.totalExpenditure || 0), 0);
  const avgUtilization = data.length ? data.reduce((sum, s) => sum + (s.utilizationPercentage || 0), 0) / data.length : 0;

  const topPerformers = [...data].sort((a, b) => (b.utilizationPercentage || 0) - (a.utilizationPercentage || 0)).slice(0, 3);
  const bottomPerformers = [...data].sort((a, b) => (a.utilizationPercentage || 0) - (b.utilizationPercentage || 0)).slice(0, 3);

  return (
    <Document>
      <Page size="A4" style={styles.page}>
        <View style={styles.headerRow}>
          <Image style={styles.logo} src="https://avatars.githubusercontent.com/u/230681844?s=200&v=4" />
          <View style={styles.titleBlock}>
            <Text style={styles.title}>Empowered Indian — MPLADS Report</Text>
            <Text style={styles.subtitle}>State-level funding & utilization snapshot (card view)</Text>
          </View>
          <View style={{ width: 110 }}>
            <Text style={styles.timestamp}>{timestamp}</Text>
            <Text style={{ fontSize: 9, color: "#6b7280", marginTop: 6 }}>Generated by Empowered Indian</Text>
          </View>
        </View>

        <View style={styles.summary}>
          <View style={styles.summaryRow}>
            <View>
              <Text style={styles.summaryTitle}>National Summary</Text>
              <Text style={styles.smallText}>Total Allocated: {formatINRCompact(totalAllocated)}</Text>
              <Text style={styles.smallText}>Total Expenditure: {formatINRCompact(totalExpenditure)}</Text>
              <Text style={styles.smallText}>Avg Utilization: {avgUtilization.toFixed(1)}%</Text>
            </View>
            <View>
              <Text style={styles.summaryTitle}>Counts</Text>
              <Text style={styles.smallText}>States: {data.length}</Text>
            </View>
          </View>

          <View style={styles.performers}>
            <View style={styles.performerCol}>
              <Text style={{ fontSize: 11, fontWeight: "700", marginBottom: 6 }}>Top 3 Performers</Text>
              {topPerformers.map((s, i) => (
                <Text key={i} style={styles.performerItem}>
                  {i + 1}. {s.state} — {String((s.utilizationPercentage || 0).toFixed(1))}%
                </Text>
              ))}
            </View>
            <View style={styles.performerCol}>
              <Text style={{ fontSize: 11, fontWeight: "700", marginBottom: 6 }}>Bottom 3 Performers</Text>
              {bottomPerformers.map((s, i) => (
                <Text key={i} style={styles.performerItem}>
                  {i + 1}. {s.state} — {String((s.utilizationPercentage || 0).toFixed(1))}%
                </Text>
              ))}
            </View>
          </View>
        </View>
        <View style={styles.cardsContainer}>
          {data.map((s, i) => {
            const pct = Number(s.utilizationPercentage || 0);
            const fillStyle = utilBarStyleFor(pct);
            return (
              <View key={i} style={styles.card}>
                <View style={styles.stateLeft}>
                  <Text style={styles.stateName}>{s.state}</Text>
                  <Text style={styles.mpBadge}>MPs: {s.mpCount ?? 0}</Text>
                </View>

                <View style={styles.metricsRight}>
                  <View style={styles.metricBlock}>
                    <Text style={styles.metricLabel}>Allocated</Text>
                    <Text style={styles.metricValue}>{formatINRCompact(s.totalAllocated ?? 0)}</Text>
                  </View>

                  <View style={styles.metricBlock}>
                    <Text style={styles.metricLabel}>Expenditure</Text>
                    <Text style={styles.metricValue}>{formatINRCompact(s.totalExpenditure ?? 0)}</Text>
                  </View>

                  <View style={styles.utilBlock}>
                    <Text style={styles.utilLabel}>{pct.toFixed(1)}%</Text>
                    <View style={styles.utilBarOuter}>
                      <View style={[fillStyle, { width: `${Math.max(0, Math.min(100, pct))}%` }]} />
                    </View>
                  </View>

                  <View style={styles.metricBlock}>
                    <Text style={styles.metricLabel}>Works Done</Text>
                    <Text style={styles.metricValue}>{s.totalWorksCompleted ?? 0}</Text>
                  </View>

                  <View style={styles.metricBlock}>
                    <Text style={styles.metricLabel}>Recommended</Text>
                    <Text style={styles.metricValue}>{s.recommendedWorksCount ?? 0}</Text>
                  </View>
                </View>
              </View>
            );
          })}
        </View>

        <Text style={styles.footer}>Generated {new Date().toLocaleString()} • Empowered Indian • https://empoweredindian.in/</Text>
      </Page>
    </Document>
  );
};

const ExportPdfButton = ({ filteredStates = [] }) => (
  console.error(filteredStates),
  <PDFDownloadLink document={<MyDocument data={filteredStates} />} fileName="states_report.pdf">
    {({ loading }) => (
      <button style={{ display: "inline-flex", gap: 8, alignItems: "center", padding: "8px 12px", borderRadius: 6 }}>
        <FiDownload /> {loading ? "Preparing..." : "Export PDF"}
      </button>
    )}
  </PDFDownloadLink>
);

export default ExportPdfButton;
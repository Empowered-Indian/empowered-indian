import React, { useState } from "react";
import { Document, Page, Text, View, StyleSheet, Image, pdf } from "@react-pdf/renderer";
import { FiDownload } from "react-icons/fi";
import { formatINRCompact } from "./formatters";
import { useMPWorks } from '../hooks/useApi';
import { createBaseStyles, createExtendedStyles, getExportButtonStyles, getDisabledButtonStyles } from "./pdfUIStyles";

const baseStyles = createBaseStyles(StyleSheet);
const extendedStyles = createExtendedStyles(StyleSheet);
const styles = { ...baseStyles, ...extendedStyles };

export async function generateMPDetailPdf(data, options = {}) {
    const { fileName: fn } = options;
    const fileName = fn || `empowered_indian_mp_detail_${data.mp?.name?.replace(/\s+/g, '_') || 'mp'}_${new Date().toISOString().split('T')[0]}.pdf`;
    const docNode = <MPDetailDocument data={data} />;
    const asPdf = pdf(docNode, { author: "Empowered Indian" });
    const blob = await asPdf.toBlob();
    const url = URL.createObjectURL(blob);
    const a = window.document.createElement("a");
    a.href = url;
    a.download = fileName;
    window.document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
    return true;
}

const MPDetailDocument = ({ data }) => {
    const timestamp = new Date().toLocaleString();
    const mp = data.mp || {};

    // Get current URL for checkout link
    const currentUrl = `${window.location.origin}${window.location.pathname}`;
    const completedWorksData = data.completedWorks || {};
    const recommendedWorksData = data.recommendedWorks || {};
    const allocatedAmount = mp.allocatedAmount || 0;
    const totalExpenditure = mp.totalExpenditure || 0;
    const utilizationPercentage = mp.utilizationPercentage || 0;
    const completionRate = mp.completionRate || 0;
    // Get works arrays - handle both direct payload structure and nested structure
    let completedWorks = completedWorksData.works || completedWorksData.completedWorks || [];
    let recommendedWorks = recommendedWorksData.works || recommendedWorksData.recommendedWorks || [];

    // Sort completed works by finalAmount (highest first) and take top 5
    let completedWorksSliced = completedWorks.slice(0, 5);

    // Sort recommended works by recommendedAmount (highest first) and take top 5
    let recommendedWorksSliced = recommendedWorks.slice(0, 5);

    const categoryStats = {};
    completedWorks.forEach(work => {
        const category = work.workCategory || 'Normal/Others';
        if (!categoryStats[category]) {
            categoryStats[category] = { count: 0, totalCost: 0 };
        }
        categoryStats[category].count++;
        categoryStats[category].totalCost += work.finalAmount || 0;
    });

    // Group works by year
    const yearlyStats = {};
    completedWorks.forEach(work => {
        const completedDate = work.completedDate || work.date;
        const year = completedDate ? new Date(completedDate).getFullYear().toString() : 'Unknown';
        if (!yearlyStats[year]) {
            yearlyStats[year] = { count: 0, totalCost: 0 };
        }
        yearlyStats[year].count++;
        yearlyStats[year].totalCost += work.finalAmount || 0;
    });

    // Prepare yearly data for chart
    const yearlyData = Object.entries(yearlyStats).map(([year, stats]) => ({
        _id: year,
        totalAmount: stats.totalCost,
        transactionCount: stats.count
    })).sort((a, b) => a._id - b._id);

    const maxYearlyAmount = Math.max(...yearlyData.map(y => y.totalAmount || 0));

    // Top categories for insights
    const topCategories = Object.entries(categoryStats)
        .sort(([, a], [, b]) => b.totalCost - a.totalCost)
        .slice(0, 3);

    return (
        <Document>
            {/* First Page - MP Overview and Completed Works */}
            <Page size="A4" style={styles.page}>
                <View style={styles.header}>
                    <View style={styles.headerGradient} />
                    <View style={styles.headerAccent} />
                    <View style={styles.headerRow}>
                        <Image style={styles.logo} src="https://avatars.githubusercontent.com/u/230681844?s=200&v=4" />
                        <View style={styles.titleBlock}>
                            <Text style={styles.title}>Empowered Indian</Text>
                            <Text style={styles.subtitle}>MP Performance Report</Text>
                            <Text style={[styles.smallText, { marginTop: 2 }]}>Transparent • Data-Driven • Impactful</Text>
                        </View>
                        <View style={{ width: '150px' }}>
                            <Text style={styles.timestamp}>{timestamp}</Text>
                            <Text style={styles.generatedBy}>Generated by Empowered Indian</Text>
                        </View>
                    </View>
                </View>

                <View style={styles.content}>
                    {/* MP Info Header */}
                    <View style={styles.summary}>
                        <View style={styles.summaryHeader}>
                            <View style={styles.summaryIcon} />
                            <Text style={styles.summaryTitle}>{mp.name || 'MP Name'}</Text>
                        </View>
                        <Text style={[styles.smallText, { marginBottom: 8 }]}>
                            {mp.constituency || 'Constituency'} • {mp.state || 'State'} • {mp.house || 'House'}
                        </Text>

                        <View style={styles.summaryGrid}>
                            <View style={styles.summaryColumn}>
                                <View style={styles.summaryMetric}>
                                    <Text style={styles.summaryMetricLabel}>Allocated Amount</Text>
                                    <Text style={styles.summaryMetricValue}>{formatINRCompact(allocatedAmount)}</Text>
                                    <Text style={styles.summaryMetricSub}>Total MPLADS allocation</Text>
                                </View>
                                <View style={styles.summaryMetric}>
                                    <Text style={styles.summaryMetricLabel}>Total Expenditure</Text>
                                    <Text style={styles.summaryMetricValue}>{formatINRCompact(totalExpenditure)}</Text>
                                    <Text style={styles.summaryMetricSub}>
                                        {utilizationPercentage.toFixed(1)}% fund utilization
                                    </Text>
                                </View>
                            </View>

                            <View style={styles.summaryColumn}>
                                <View style={styles.summaryMetric}>
                                    <Text style={styles.summaryMetricLabel}>Total Works</Text>
                                    <Text style={styles.summaryMetricValue}>{mp.recommendedWorksCount}</Text>
                                    <Text style={styles.summaryMetricSub}>
                                        {completionRate.toFixed(1)}% completion rate
                                    </Text>
                                </View>
                                <View style={styles.summaryMetric}>
                                    <Text style={styles.summaryMetricLabel}>Works Completed</Text>
                                    <Text style={styles.summaryMetricValue}>{mp.completedWorksCount}</Text>
                                    <Text style={styles.summaryMetricSub}>{mp.pendingWorks || 0} pending works</Text>
                                </View>
                            </View>
                        </View>
                    </View>

                    {/* Expenditure Chart */}
                    {yearlyData.length > 0 && (
                        <View style={styles.chart}>
                            <View style={styles.chartHeader}>
                                <View style={styles.chartIcon} />
                                <Text style={styles.chartTitle}>Yearly Expenditure Trend</Text>
                            </View>
                            <View style={styles.chartContainer}>
                                {yearlyData.map((yearData, i) => {
                                    const amount = yearData.totalAmount || 0;
                                    const height = maxYearlyAmount > 0 ? Math.max(10, (amount / maxYearlyAmount) * 100) : 10;
                                    return (
                                        <View key={i} style={styles.chartBar}>
                                            <View style={[styles.chartBarFill, { height }]}>
                                                <Text style={styles.chartValue}>{formatINRCompact(amount)}</Text>
                                            </View>
                                            <Text style={styles.chartLabel}>{yearData._id}</Text>
                                        </View>
                                    );
                                })}
                            </View>
                        </View>
                    )}

                    {/* Yearly Breakdown */}
                    {yearlyData.length > 0 && (
                        <View style={styles.yearlyBreakdown}>
                            <View style={styles.yearlyHeader}>
                                <View style={styles.yearlyIcon} />
                                <Text style={styles.yearlyTitle}>Yearly Performance Breakdown</Text>
                            </View>
                            {yearlyData.map((yearData, i) => (
                                <View key={i} style={styles.yearlyItem}>
                                    <Text style={styles.yearlyYear}>{yearData._id}</Text>
                                    <View>
                                        <Text style={styles.yearlyStats}>
                                            {yearData.transactionCount} works • {formatINRCompact(yearData.totalAmount)}
                                        </Text>
                                    </View>
                                </View>
                            ))}
                        </View>
                    )}

                    {/* Category Breakdown */}
                    {Object.keys(categoryStats).length > 0 && (
                        <View style={styles.works}>
                            <View style={styles.worksHeader}>
                                <View style={styles.worksIcon} />
                                <Text style={styles.worksTitle}>Work Categories Breakdown</Text>
                            </View>
                            {topCategories.map(([category, stats], i) => (
                                <View key={i} style={styles.workItem}>
                                    <Text style={styles.workTitle}>{category}</Text>
                                    <Text style={styles.workDescription}>
                                        {stats.count} works • Total cost: {formatINRCompact(stats.totalCost)}
                                    </Text>
                                    <View style={styles.workMeta}>
                                        <Text style={styles.workMetaItem}>
                                            Average: {formatINRCompact(stats.totalCost / stats.count)}
                                        </Text>
                                        <Text style={styles.workMetaItem}>
                                            {((stats.totalCost / totalExpenditure) * 100).toFixed(1)}% of total
                                        </Text>
                                    </View>
                                </View>
                            ))}
                        </View>
                    )}

                    {/* Completed Works - Always show top 5 if available */}
                    {completedWorksSliced.length > 0 && (
                        <View style={styles.works}>
                            <View style={styles.worksHeader}>
                                <View style={styles.worksIcon} />
                                <Text style={styles.worksTitle}>Top Completed Works</Text>
                            </View>
                            {completedWorksSliced.map((work, i) => (
                                <View key={i} style={styles.workItem}>
                                    <Text style={styles.workTitle}>{work.workCategory || 'Work'}</Text>
                                    <Text style={styles.workDescription}>{work.workDescription || 'No description'}</Text>
                                    <View style={styles.workMeta}>
                                        <Text style={styles.workMetaItem}>
                                            Completed: {new Date(work.completedDate || work.date).toLocaleDateString()}
                                        </Text>
                                        <Text style={styles.workMetaItem}>
                                            Amount: {formatINRCompact(work.finalAmount || 0)}
                                        </Text>
                                    </View>
                                </View>
                            ))}
                        </View>
                    )}
                </View>
            </Page>

            {/* Second Page - Recommended Works */}
            {recommendedWorksSliced.length > 0 && (
                <Page size="A4" style={styles.page}>
                    <View style={styles.content}>
                        {/* Recommended Works - Always show top 5 if available */}
                        <View style={styles.works}>
                            <View style={styles.worksHeader}>
                                <View style={styles.worksIcon} />
                                <Text style={styles.worksTitle}>Top Recommended Works</Text>
                            </View>
                            {recommendedWorksSliced.map((work, i) => (
                                <View key={i} style={styles.workItem}>
                                    <Text style={styles.workTitle}>{work.workCategory || 'Work'}</Text>
                                    <Text style={styles.workDescription}>{work.workDescription || 'No description'}</Text>
                                    <View style={styles.workMeta}>
                                        <Text style={styles.workMetaItem}>
                                            Recommended: {new Date(work.recommendationDate || work.date).toLocaleDateString()}
                                        </Text>
                                        <Text style={styles.workMetaItem}>
                                            Amount: {formatINRCompact(work.recommendedAmount || work.totalPaid || 0)}
                                        </Text>
                                    </View>
                                </View>
                            ))}
                        </View>
                    </View>

                    <View style={styles.footer}>
                        <View style={styles.footerLeft}>
                            <Image style={styles.footerLogo} src="https://avatars.githubusercontent.com/u/230681844?s=200&v=4" />
                            <Text style={[styles.smallText, { marginTop: 2, fontSize: 7 }]}>
                                * Data sourced from official MPLADS records. For latest updates, visit empoweredindian.in
                            </Text>
                        </View>
                    </View>
                </Page>
            )}
        </Document>
    );
};

const ExportMPsDetailAsPdf = ({ mpData }) => {
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    const mpComWorksParams = {
        state: mpData?.state || '',
        constituency: mpData?.constituency || '',
        status: 'completed'
    };

    const mpRecWorksParams = {
        state: mpData?.state || '',
        constituency: mpData?.constituency || '',
        status: 'recommended'
    };

    const completedWorks = useMPWorks(mpData.id, mpComWorksParams);
    const recommendedWorks = useMPWorks(mpData.id, mpRecWorksParams);

    const data = {
        mp: mpData,
        completedWorks: completedWorks?.data?.data ? completedWorks?.data?.data : completedWorks?.data,
        recommendedWorks: recommendedWorks?.data?.data ? recommendedWorks?.data?.data : recommendedWorks?.data
    }

    console.log("ExportMPsDetailAsPdf mpData:", data);

    if (!data) {
        return (
            <button
                disabled
                style={getDisabledButtonStyles()}
            >
                <FiDownload /> No data to export
            </button>
        );
    }

    const handleClick = async () => {
        setError(null);
        setLoading(true);
        try {
            await generateMPDetailPdf(data, {
                fileName: `empowered_indian_mp_detail_${data.mp?.name?.replace(/\s+/g, '_') || 'mp'}_${new Date().toISOString().split('T')[0]}.pdf`
            });
        } catch (e) {
            console.error("PDF generation failed", e);
            setError("Failed to generate PDF");
        } finally {
            setLoading(false);
        }
    };

    return (
        <button
            onClick={handleClick}
            disabled={loading}
            style={getExportButtonStyles(loading)}
        >
            <FiDownload />
            {loading ? "Generating PDF..." : error ? "Export Failed" : "Download Report"}
        </button>
    );
};

export default ExportMPsDetailAsPdf;